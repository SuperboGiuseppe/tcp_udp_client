import UDP_communication as udp

def receive_parts(s, key, key_index):
    data_remaining = -1
    message = ''
    k=key_index
    while(data_remaining != 0):
        if(k == 0):
            #print(key[k][0:65])
            words, EOM, data_remaining = udp.received_data(s, key[k][1:65])
        else:
            #print(key[k][0:65])
            words, EOM, data_remaining = udp.received_data(s, key[k][0:65])
        #print(data_remaining)
        message += words
        #print(message)
        k += 1
    print("Received message:", message)
    return message, EOM, k

    '''
    Merge the 64 byte string received from the server into a full message
    :param s: the socket
    :param key: the array of key received from the server
    :param key_index: the index of the current key in the array used to encrypt the message
    :return, the message, the EndOfMessage boolean and the key index
    '''

def send_parts(CID, UDP_port, host_address, s, message, key, key_index):
    print("Reversed message:", message)
    length = len(message)
    data_remaining = length
    i = 0
    k = key_index
    while(data_remaining != 0):
        if(data_remaining <= 64):
            piece = message[i:i+data_remaining+1]
            data_remaining = 0
            print(piece)
            print("Length of piece:" , len(piece))
            print("KEY:", key[k][0:64])
            print("Length of key:", len(key[k][0:64]))
            udp.send_message(CID, UDP_port, host_address, s, piece, key[k][0:64], data_remaining)
        if(data_remaining > 64 and i == 0):
            piece = message[i:i+64]
            data_remaining -= 64
            print(piece)
            print("Length of piece:" , len(piece))
            print("KEY:", key[k][0:64])
            print("Data left:", data_remaining)
            print("Length of key:", len(key[k][0:64]))
            udp.send_message(CID, UDP_port, host_address, s, piece, key[k][0:64], data_remaining)
        if (data_remaining > 64 and i != 0):
            piece = message[i:i + 63]
            data_remaining -= 64
            print(piece)
            print("Length of piece:" , len(piece))
            print("Data left:", data_remaining)
            print("KEY:", key[k][0:64])
            print("Length of key:", len(key[k][0:64]))
            udp.send_message(CID, UDP_port, host_address, s, piece, key[k][0:64], data_remaining)
        i += 64
        k += 1
    return k

    '''
    Split the full message into 64 byte strings message and send them to the server
    :param CID: The client's identification token
    :param UDP_port: the port where the message will be sent
    :param host_adress: the address of the server
    :param s: the socket
    :param message: the full message to send
    :param key: the array of key generated by the client to encrypt the message send to the server
    :param key_index: the index of the current key in the array used to encrypt the message
    :return The key index
    '''